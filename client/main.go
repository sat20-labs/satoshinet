package main

import (
	"log"
	"os"
	"path/filepath"

	// "github.com/sat20-labs/satoshinet/btcutil"
	"github.com/sat20-labs/satoshinet/rpcclient"
)

func main() {
	// Load the certificate for the TLS connection which is automatically
	// generated by btcd when it starts the RPC server and doesn't already
	// have one.
	// btcdHomeDir := btcutil.AppDataDir("btcd", false)
	var btcdHomeDir string = "./"
	// btcdHomeDir := btcutil.AppDataDir("btcd", false)
	certs, err := os.ReadFile(filepath.Join(btcdHomeDir, "rpc.cert"))
	if err != nil {
		log.Fatal(err)
	}

	// Create a new RPC client using websockets.  Since this example is
	// not long-lived, the connection will be closed as soon as the program
	// exits.
	connCfg := &rpcclient.ConnConfig{
		Host: "192.168.10.102:8337",
		User: "jacky",
		Pass: "_RZekaGRgKQJSIOYi6vq0_CkJtjoCootamy81J2cDn0",
		// Endpoint:     "ws",
		Certificates: certs,
		HTTPPostMode: true, // 启用 HTTP POST 模式
		// DisableTLS:   true, // 禁用 TLS
	}
	client, err := rpcclient.New(connCfg, nil)
	if err != nil {
		log.Fatal(err)
	}
	result, err := client.EstimateSmartFee(6, nil)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(result)
	defer client.Shutdown()

	// Query the RPC server for the current block count and display it.
	blockCount, err := client.GetBlockCount()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Block count: %d", blockCount)
}
